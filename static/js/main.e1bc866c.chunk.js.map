{"version":3,"sources":["App.js","index.js"],"names":["App","useState","columns","setColumns","rows","setRows","cgap","setCgap","rgap","setRgap","divs","setDivs","display","mostrar","setMostrar","inputs","setInputs","nomeButton","setNomeButton","handleSubmit","e","preventDefault","console","log","mostrarCodigo","principalStyle","gridTemplateColumns","gridTemplateRows","gridGap","cores","gridtemplatecolumns","gridtemplatecolumnscode","gridtemplaterows","gridtemplaterowscode","gridgapcolumn","gridgapcolumncode","gridgaprow","gridgaprowcode","id","href","target","rel","style","className","totalDivs","i","key","Math","random","length","map","item","criarDivs","onClick","htmlFor","name","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1bc866c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './style.css';\n\nfunction App() {\n\n  const [ columns, setColumns ] = useState(1);\n  const [ rows, setRows ] = useState(1);\n  const [ cgap, setCgap ] = useState(0);\n  const [ rgap, setRgap ] = useState(0);\n  const [ divs, setDivs ] = useState([]);\n  let [ mostrar, setMostrar ] = useState({ display: 'none' });\n  let [ inputs, setInputs ] = useState({ display: 'block' });\n  let [ nomeButton, setNomeButton ] = useState('Show code')\n\n  function handleColumns(e) {\n    setColumns(e.target.value);\n  }\n\n  function handleRows(e) {\n    setRows(e.target.value);    \n  }\n\n  function handleCgap(e) {\n    setCgap(e.target.value);\n  }\n  \n  function handleRgap(e) {\n    setRgap(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    \n    setDivs(divs);\n    mostrarCodigo();\n  }\n  \n  function criarDivs() {\n    \n    let totalDivs = columns * rows;\n\n    for (let i = 0; i < totalDivs; i++) {\n      divs[i] = <div key={Math.random()}></div>;\n      divs.length = totalDivs;\n    }\n    \n    return divs.map(item => item);\n\n  }\n\n  function mostrarCodigo() {\n    \n    if (mostrar.display === 'none') {\n      setMostrar(mostrar = {display: 'block'});\n      setInputs(inputs = {display: 'none'});\n      setNomeButton('Hide code');\n    } else {\n      setMostrar(mostrar = {display: 'none'});\n      setInputs(inputs = {display: 'block'});\n      setNomeButton('Show code');\n    }\n\n    console.log(mostrar)\n\n  }\n  \n  let principalStyle = {\n\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    gridTemplateRows: `repeat(${rows}, 1fr)`,\n    gridGap: `${rgap}px ${cgap}px`,\n  \n  }\n\n  const cores = {\n    gridtemplatecolumns: `grid-template-columns: `,\n    gridtemplatecolumnscode: `repeat(${columns}, 1fr);`,\n  \n    gridtemplaterows: `grid-template-rows: `,\n    gridtemplaterowscode: `repeat(${rows}, 1fr);`,\n    \n    gridgapcolumn: `grid-column-gap: `,\n    gridgapcolumncode: `${cgap}px;`,\n    \n    gridgaprow: `grid-row-gap: `,\n    gridgaprowcode: `${rgap}px;`,\n  \n  }\n\n\n  return (\n    <div id=\"container\">\n\n      <div id=\"cabecalho\">\n        <h1>Get Grid CSS</h1>\n        \n        <div id=\"description\">\n          <p>\n            Developed with â˜• by\n            <a href=\"https://github.com/axelrammon\" \n              target=\"_blank\" rel=\"noopener noreferrer\"> Axel Rammon\n            </a>\n          </p>\n        </div>\n      </div>\n\n      <div id=\"conteudo\">\n        <div style={principalStyle} className=\"principal\">\n          {criarDivs(divs)}\n        </div>\n        <div className=\"codigo\" style={mostrar}>\n          <p><span>{cores.gridtemplatecolumns}</span>{cores.gridtemplatecolumnscode}</p>\n          <p><span>{cores.gridtemplaterows}</span>{cores.gridtemplaterowscode}</p>\n          <p><span>{cores.gridgapcolumn}</span>{cores.gridgapcolumncode}</p>\n          <p><span>{cores.gridgaprow}</span>{cores.gridgaprowcode}</p>\n\n          <button onClick={handleSubmit}>{nomeButton}</button>\n        </div>\n        <div className=\"dados\" style={inputs}>\n          <form>\n            <label htmlFor=\"gtc\">grid-template-columns:</label> \n            <input name=\"gtc\" value={columns} onChange={handleColumns} type=\"number\"/>\n            <br/><br/>\n            <label htmlFor=\"gtr\">grid-template-rows:</label> \n            <input name=\"gtr\" value={rows} onChange={handleRows} type=\"number\"/>\n            <br/><br/>\n            <label htmlFor=\"ggc\">grid-gap-colum:</label> \n            <input name=\"ggc\" value={cgap} onChange={handleCgap} type=\"number\"/>\n            <br/><br/>\n            <label htmlFor=\"ggr\">grid-gap-row:</label> \n            <input name=\"ggr\" value={rgap} onChange={handleRgap} type=\"number\"/>\n            <br/><br/>\n            <button onClick={handleSubmit}>{nomeButton}</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}